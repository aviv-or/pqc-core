const should = require('chai').should();
const expect = require('chai').expect;
const _ = require('lodash');

import pqccore from '../../../lib'

const {
  Script, Address, Transaction, PrivateKey
} = pqccore
const {BN, Signature} = pqccore.crypto
const {Input, Output} = Transaction
const MultiSigInput = Transaction.Input.MultiSig;

describe('MultiSigInput', () => {
  const privateKey1 = new PrivateKey('2ShLGGW7NPNdTJsYKkVxx8Wp5ThyASmpumDKkj5P8iCGia7s3yXY3AnhCQRs9kQeYEoHjGHgmDCLhynE2RZPfQYh8ej1YGK');
  const privateKey2 = new PrivateKey('2SV7QR25RCZAT6GeyhmTAw6Rrm4JSywAUKow9CWnY277c8BeHv7B2UNJPm3sG6zm8cSn2qNozy2yco6nVFMuy1q7ojNdsUB');
  const privateKey3 = new PrivateKey('2SWYiDzgzw1dmDh1SfZXi51kBUD6A1Qzncjf4Fgi1zm4LqxaM9qtRnLULeZjwMc97sfxwAka9j8Kz2d8VSwgFAKuj8AUgmg');
  const public1 = privateKey1.publicKey;
  const public2 = privateKey2.publicKey;
  const public3 = privateKey3.publicKey;
  const address = new Address('Lfci7ooSc31oNijNG9zDeHBBHJddxrPEKX');

  const output = {
    txId: '66e64ef8a3b384164b78453fa8c8194de9a473ba14f89485a0e433699daec140',
    outputIndex: 0,
    script: new Script('524c8204401a09ab4ef7473b4f7f59f2c9bc8413b514cd0d5bc1c5b3f4256282d1edfd3027421e16944bd6e863a4dfe843c0c8f0524a1e6a4afd03ef2d7b62582c9c1bd1a71a09ab4ef7473b4f7f59f2c9bc8413b514cd0d5bc1c5b3f4256282d1edfd3027421e16944bd6e863a4dfe843c0c8f0524a1e6a4afd03ef2d7b62582c9c1bd1a74c8204402c95ddf8dc83d7ec53c6181c2d44904fb6e77e788a5564553454e73dab81d15c056ba6ef65a3dfbaf3083c40f774d15ae2d79a6cc06099956d44a7f3c85646a52c95ddf8dc83d7ec53c6181c2d44904fb6e77e788a5564553454e73dab81d15c056ba6ef65a3dfbaf3083c40f774d15ae2d79a6cc06099956d44a7f3c85646a54c8204407b51912d071d2f13494fb6413683522ea3b141a58cc316de21fa411109bd62bedfeab09fab9f14e6501239c16d7faa025502672912159cc0e7874f46a398e8977b51912d071d2f13494fb6413683522ea3b141a58cc316de21fa411109bd62bedfeab09fab9f14e6501239c16d7faa025502672912159cc0e7874f46a398e89753ae'),
    glv: 1000000
  };
  const sc = Script.buildMultisigOut([public1, public2, public3], 2)
  console.log(sc.toHex())
  const add = Address.createMultisig([public1, public2, public3], 2, 'testnet')
  console.log(36, add.toString())

  it('can count missing signatures', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];

    input.countSignatures().should.equal(0);

    transaction.sign(privateKey1);
    input.countSignatures().should.equal(1);
    input.countMissingSignatures().should.equal(1);
    input.isFullySigned().should.equal(false);

    transaction.sign(privateKey2);
    console.log(41, transaction.toString())
    input.countSignatures().should.equal(2);
    input.countMissingSignatures().should.equal(0);
    input.isFullySigned().should.equal(true);
  });
  it('can count missing signatures, signed with key 3 and 1', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];

    input.countSignatures().should.equal(0);

    transaction.sign(privateKey3);
    input.countSignatures().should.equal(1);
    input.countMissingSignatures().should.equal(1);
    input.isFullySigned().should.equal(false);

    transaction.sign(privateKey1);
    console.log(69, transaction.toString())
    input.countSignatures().should.equal(2);
    input.countMissingSignatures().should.equal(0);
    input.isFullySigned().should.equal(true);
  });
  it('returns a list of public keys with missing signatures', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];

    _.every(input.publicKeysWithoutSignature(), (publicKeyMissing) => {
      const serialized = publicKeyMissing.toString();
      return serialized === public1.toString() ||
              serialized === public2.toString() ||
              serialized === public3.toString();
    }).should.equal(true);
    transaction.sign(privateKey1);
    _.every(input.publicKeysWithoutSignature(), (publicKeyMissing) => {
      const serialized = publicKeyMissing.toString();
      return serialized === public2.toString() ||
              serialized === public3.toString();
    }).should.equal(true);
  });
  it('can clear all signatures', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000)
      .sign(privateKey1)
      .sign(privateKey2);

    const input = transaction.inputs[0];
    input.isFullySigned().should.equal(true);
    input.clearSignatures();
    input.isFullySigned().should.equal(false);
  });
  it('can estimate how heavy is the output going to be', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];
    input._estimateSize().should.equal(147);
  });
  it('uses SIGHASH_ALL by default', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];
    const sigs = input.getSignatures(transaction, privateKey1, 0);
    sigs[0].sigtype.should.equal(Signature.SIGHASH_ALL);
  });
  it('roundtrips to/from object', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000)
      .sign(privateKey1);
    const input = transaction.inputs[0];
    const roundtrip = new MultiSigInput(input.toObject());
    roundtrip.toObject().should.deep.equal(input.toObject());
  });
  it('roundtrips to/from object when not signed', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];
    const roundtrip = new MultiSigInput(input.toObject());
    roundtrip.toObject().should.deep.equal(input.toObject());
  });
  it('can parse list of signature buffers, from TX signed with key 1 and 2', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction('');

    const inputObj = transaction.inputs[0].toObject();
    inputObj.output = output;
    transaction.inputs[0] = new Transaction.Input(inputObj);

    inputObj.signatures = MultiSigInput.normalizeSignatures(
      transaction,
      transaction.inputs[0],
      0,
      transaction.inputs[0].script.chunks.slice(1).map((s) => { return s.buf; }),
      [public1, public2, public3]
    );

    transaction.inputs[0] = new MultiSigInput(inputObj, [public1, public2, public3], 2);

    transaction.inputs[0].signatures[0].publicKey.should.deep.equal(public1);
    transaction.inputs[0].signatures[1].publicKey.should.deep.equal(public2);
    should.equal(transaction.inputs[0].signatures[2], undefined);
    transaction.inputs[0].isValidSignature(transaction, transaction.inputs[0].signatures[0]).should.be.true;
    transaction.inputs[0].isValidSignature(transaction, transaction.inputs[0].signatures[1]).should.be.true;
  });
  it('can parse list of signature buffers, from TX signed with key 3 and 1', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction('');

    const inputObj = transaction.inputs[0].toObject();
    inputObj.output = output;
    transaction.inputs[0] = new Transaction.Input(inputObj);

    inputObj.signatures = MultiSigInput.normalizeSignatures(
      transaction,
      transaction.inputs[0],
      0,
      transaction.inputs[0].script.chunks.slice(1).map((s) => { return s.buf; }),
      [public1, public2, public3]
    );

    transaction.inputs[0] = new MultiSigInput(inputObj, [public1, public2, public3], 2);

    transaction.inputs[0].signatures[0].publicKey.should.deep.equal(public1);
    should.equal(transaction.inputs[0].signatures[1], undefined);
    transaction.inputs[0].signatures[2].publicKey.should.deep.equal(public3);
    transaction.inputs[0].isValidSignature(transaction, transaction.inputs[0].signatures[0]).should.be.true;
    transaction.inputs[0].isValidSignature(transaction, transaction.inputs[0].signatures[2]).should.be.true;
  });
});
