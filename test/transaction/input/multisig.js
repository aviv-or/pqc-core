const should = require('chai').should();
const expect = require('chai').expect;
const _ = require('lodash');

import pqccore from '../../../lib'

const {
  Script, Address, Networks, Opcode, Transaction, errors, PrivateKey
} = pqccore
const TransactionSignature = Transaction.Signature
const {BN, Signature} = pqccore.crypto
const {Input, Output} = Transaction
const MultiSigInput = Transaction.Input.MultiSig;

describe('MultiSigInput', () => {
  const privateKey1 = new PrivateKey('2ShLGGW7NPNdTJsYKkVxx8Wp5ThyASmpumDKkj5P8iCGia7s3yXY3AnhCQRs9kQeYEoHjGHgmDCLhynE2RZPfQYh8ej1YGK');
  const privateKey2 = new PrivateKey('2SV7QR25RCZAT6GeyhmTAw6Rrm4JSywAUKow9CWnY277c8BeHv7B2UNJPm3sG6zm8cSn2qNozy2yco6nVFMuy1q7ojNdsUB');
  const privateKey3 = new PrivateKey('2SWYiDzgzw1dmDh1SfZXi51kBUD6A1Qzncjf4Fgi1zm4LqxaM9qtRnLULeZjwMc97sfxwAka9j8Kz2d8VSwgFAKuj8AUgmg');
  const public1 = privateKey1.publicKey;
  const public2 = privateKey2.publicKey;
  const public3 = privateKey3.publicKey;
  const address = new Address('Lfci7ooSc31oNijNG9zDeHBBHJddxrPEKX');

  const output = {
    txId: '66e64ef8a3b384164b78453fa8c8194de9a473ba14f89485a0e433699daec140',
    outputIndex: 0,
    script: new Script('524d450404401a09ab4ef7473b4f7f59f2c9bc8413b514cd0d5bc1c5b3f4256282d1edfd3027421e16944bd6e863a4dfe843c0c8f0524a1e6a4afd03ef2d7b62582c9c1bd1a701030006106b5a641d2e855100354d4ace22afc958b0e5baa22e01fd68db0f065d9ec7d466e54982a8c4d128abd825922b5fde77eba909f53f125bffafee4921f28a0cffe5e9fef6689c83d9043be96b2a9d5732124e03660cee7069234de15573cb39df5b19d4cc34ef7d2ea4ec9ba5a6b79513b28a6b53925955649e72c9a5373a9fbb218425a558c3ff47b00fd42de5e73efbce16331bfed3affc4b2d3a1e60fa189c430a017860d00c6968e934f88e00a8bb3f083959d5fea6b1d027155c4b83c5b7351b589b87377be6de5e525090497b1be96989802e4f6a96523dd5eb71e48b379ac1d3d8ceaf7e4ec47e9fd4381126f1963071a56a2ada7e0dacf169b67fe0e5558ca803f688e36cc70726715e9318a57bc7b4cbe8eb77aab80125fc4972f0c17608d7a095d7f340b87ac750445005e552d58f7355a5a8c48fee375d4de061f99a2fa6a4b10f17e6e1dbb3f5b92ccb30268f6963ffb7ead12ef1c77355d967fe74b9a3f0c395f96168ed71e63ca518a2411bbe783f12f0376e806fb2a46f0fc4cd7387e8e6b954dca91afb29e0585ea47b60d27a4320db828cf3f830dbf284c154393eb4a589f4932048bbb9d881938cf2ba5db0fd6c80e7964bfb1162b3d47af2cf4334d9e9d01a70e6c0e52af670f15a4ea7c1fac8d0c9fd7dead8dc049e0a8a8e254cf56d31143d2251d2dfb475fb694cfa3f601db40acf1e8eb2d13e03e9a024f232baf879ba0b6284552614fc2d9d391e162b1df08772f680450efffd600fd3d88c7ca08c7755a64c1063df1469a1fbd34984f7d3ecf8991007f3ab04facfad6ea10e950aefd87d5c47ad64053b426791eb2df01619e8b8079d47dee1fafde6b5c6ad82fb2cfe6ed9cf0027d13ece77e468eeed0842a9714669ff87b03341cad4827d251e20566cd0f2f2dcf1feaeed70a91bbee2ef4b1c892b7bc68d4b28d827441390ec2ae346ce097ea3b72bb02cc0a70cb05d9f98a88422c6e6cdebc552c7cc8f48d5e5f5c9a90bfb6d546f7256c7798e793c5335b3f35f2dacc9ad68e33324bc29e4ec2627862a77b093726a1c24abb5499ea2ada96987ee14c6ea00fe3676e0e52776d59db91d3979fcc05021a43e41f9cd1855c74a96205c2e68c9320fbd7a5b2c1f136e15249e5f308fb315a8fa8ff53d71b527db701a948420f6b3098718f5f100a3916466469f165ad5c52ab5897eaa7a163435bc5cf2b0bb2ade3af3861a5915d7e82a4310dbc2e0fbe37fed256d1409e2faae7ea8ef217f290ecce992356a21939c471121c968002c5a293d82f82ef0812f4c94f2e2ecb8201f9bf0a24d5daea3ca8ac173529a0e531c33b37e0a9c6606af930f5f7fefa0f0eed9f00f4c548e8e723264d7c71ce6cf5944951d4a038be5dc49a127b8b22b241041130eccf06a871d1886b6d98c96d1c46077faf8d192388ee2dc28c7684d450404402c95ddf8dc83d7ec53c6181c2d44904fb6e77e788a5564553454e73dab81d15c056ba6ef65a3dfbaf3083c40f774d15ae2d79a6cc06099956d44a7f3c85646a501030006105b8e3677cfbf7d926ea88f7c20b9e08081973b4e729154eb9eb7c4d1f8cbef099e98248ff9bd21a0bdf6423a1a11188f00432ee4464e2922d4f45b164ba4140232912b90002da8e33b1419d3026568af56ee64dd6bf41e14cfc02cf1f16b6796c2b4ced35e8849d8175307ec9889c4ce3be96db46c7f05222dcc1301e55429156f711df8a5853b95b7f79b902c214acef4aea0031df897f8f3339e954c4062ee215aa68e5d85e75449b2beab4e6a3bdb2e557c1003014bce867e82d2efe27d8bd3f4eb395399ac6150e68f5d87dd09e4b532fdeae92083ed6271d6ed3a8ec4c8a781df7d8b5a4cc6765af0e6e723fba92f49c9d3fa12f02fc74c0c19a6b3fc98542ef00699a92b82867378f0cb3c064f521f13bbd9aa5b93d32f0026a55b2d6edb6ba6dd572819a29d4b73756fa05f87100aa508ae4e30b34207df423bda41e8b383670265aadc4427bfaeb1ce41c460244fd224622596fa778336345942d1121656fb746171da94d2dfc1b731337b16e424aab76f7c1dc0a2b900882ebec14cfdaa6d24eb8e4c98b73c29f8f9e3979024e8f9e152f64982fa98eb0ed6d56c3edfdaa4d490f9f4886a1a45f0d114c98655445ac26c9b358a5b554cd5dbd364917a9bee5cd7587db540eb1e83993873a8467ffcbe4e8fff90e2de39d7e6db211b206ddd32c8b73fa73b7c41370a949b12e1d935f65dced6509f3ef16dbc1368437a06549774771f6b6f5b13574161b7333aa028530d8fb24346e2f6e9719290feaa247a9d19ab8a8e8b1c955db17a5f71176bc50be0bb664d563c48e8a84f4b1c7b6d31317f1fbae43c540bb01c7372d4c2ea02a72d7874078a60e8db81a0e8ef41e417a42c962abec51a3d0e41756ebc80044657ef2edb9e5726bbbad223fe3535d5ae41b178a69388fed162eef631e475abf9dca7544aee52f3d4d30a174d6c49230865d9934e5fe664965fa329a8d409da0a31a17dd89b4fae51ac2c931bb8e42f0a5d1dd328047a28d009c9d83f11bac9c7015c247429f7cc8aa70ce19795dc159b1ef4b4b6743696763305c8daf0fe6afa1b6df6a87fae24c3b1af16ede838fe87e8de82c9286c585d52c0cdba890a455268d9aa967d0ddd80ea9322e3869ec95fe54afe07d46b72273fd5552c63ab6d2d9c2d8aec1c7266ef8e986dc9e951f8eb370a986f83dc383c841b203e5e5d3c2d34f92e45b0edde23802811a62c8b3aa023e2b2381a005210a00c1269ee542e54c5d35bb18d8f8e0b90c6681a040e325c0f0a2335a5295ad830fed56c45fa2f7bfb964316d6bafeea5f8a473f0dd1c066ec8e85e89d9f35477ce22e5574c2d25b3a315a12f56cda52a328408745be77ff527d20426bc958e88261a05e466afdeed8e372b2a4aeb1ebc6db3beb9d334bfc60e3c7a21f34eee1eca349050621dab298b9a41ac47b9287313a204d450404407b51912d071d2f13494fb6413683522ea3b141a58cc316de21fa411109bd62bedfeab09fab9f14e6501239c16d7faa025502672912159cc0e7874f46a398e89701030006107b60776d58bded0f587216d4c0a3fc5b54f9cbc856da76effcbc9f92e3ddd8d0f43bf6659020293567ae9f4feb3eab9437fa5ae57a93a90f59ca8ef1e58171fa32a5a67de4ae01df1bfef424631427260e445fafd4799174da82b0974741622f56ac82babd572693308f0671182c283dd04bbdfc263e3550ece3f2445ab2b56d38c273e7ce6784d09cf2989740ead485591e4d677b5addbac9e35b816b315aa9f4fe07b728c38f295252e95d39a6ad13953fadc2f3796c426b71089fab5b131d68d32f42a975abc8b1efca125216fe93f3c8dec226675cdf2fa313a0cfc5dbcf3ce5ca7ff318e6b2dd24b7a1d9b9b725bac7483695c583277994824d105d4284ad7e2960de01cec5ba8b56f0d2a0a2c61a751d7e2b5ae169265e4396830889aff21f158b96a5c89e9a38b954f7925a8352ed2e9a470cdd648b3d6f41ee8f6b5e732cc2c873ac5a1d2b95e9daf4051a99bf6075a937cd6d5f17862243b14616937e1c3d90e5da51d95bfe15583ca83ffafa4b4547e1d303f471f60ef1793f36f34a2a0abf6aec1ecb181725bbc5e0952e4b4fed8704f450c337332fb768f9753b15fff992e0991dc6591f87cf1610c55830fee7dcefde9f9018592109b7ac2e87a3a81ad5045e052b4e66b299d32c0eb1902423840132aa18fbd4eded02cc76cf47870961c8752aae2de036edb9b2a585c2af35a6729ef4b3f1151c056b4bb7d73cfd13fff085132db3e97f7162fb13e7e1695d8d0496796497e531077f4c5b3301f556b31d070f59be16c315abcf782341f7445d771b781f85e4cf5c55ae320ca061f33483b9d7ba4da9350e32ac342e5a8fb953bec3055f20f82de9240a9116c040d4d84d09168400878ffb4bcb383b2e7e32ec3b545f56b371391ee4f8bc3ec0e2fd93824cc0f0add9ae15255e6400fc1638fa9f5a19b2e5019769df3487ea418f2034889e6c43bbb82335f070187174b4665848bc511b0f55ccc39cdda7ad45da6f46fc95ebafdf2888ee592640150ec83a459b12f59e026a4415bbe989fecc5e68713ea1d0c1c133399f26b191d5ab6d27f8e48520087c1788b7445a780b358dba900d79f0147ec2358022fef6c26061b22e4ba964dcd483f7a7e0d6606f39e1a1b8a3654387a4f36f3c796492890f90e7871ab7e84dd3480b6f54d90a0133da4c330852d4615ceedd498275bd074d2b4a519c0f6fa3b9b0a64ce46d6b61c88121087695b57c3aab487a209a6be334f396e314bd575a61bcb685358375ccf219c7447dca25a6e81e152eacd83a67154cea6af58d47a702d9366b09d0b0763cc80f76f0a04edebb88893272a5d54463b8f65c58abd2ed7fa9c4dfe613a43e57611cd6972d852e35cbdca30c81d73d2947078f49ddd2851702f083732a8152946cbdf0a4e67620cdf7fbc1b5acd2710cd5d8996d0ee0a55c3e4e8120d053ae'),
    glv: 1000000
  };
  const sc = Script.buildMultisigOut([public1, public2, public3], 2)
  console.log(sc.toHex())
  const add = Address.createMultisig([public1, public2, public3], 2, 'testnet')
  console.log(36, add.toString())

  it('can count missing signatures', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];

    input.countSignatures().should.equal(0);

    transaction.sign(privateKey1);
    input.countSignatures().should.equal(1);
    input.countMissingSignatures().should.equal(1);
    input.isFullySigned().should.equal(false);

    transaction.sign(privateKey2);
    console.log(41, transaction.toString())
    input.countSignatures().should.equal(2);
    input.countMissingSignatures().should.equal(0);
    input.isFullySigned().should.equal(true);
  });
  it('can count missing signatures, signed with key 3 and 1', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];

    input.countSignatures().should.equal(0);

    transaction.sign(privateKey3);
    input.countSignatures().should.equal(1);
    input.countMissingSignatures().should.equal(1);
    input.isFullySigned().should.equal(false);

    transaction.sign(privateKey1);
    console.log(69, transaction.toString())
    input.countSignatures().should.equal(2);
    input.countMissingSignatures().should.equal(0);
    input.isFullySigned().should.equal(true);
  });
  it('returns a list of public keys with missing signatures', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];

    _.every(input.publicKeysWithoutSignature(), (publicKeyMissing) => {
      const serialized = publicKeyMissing.toString();
      return serialized === public1.toString() ||
              serialized === public2.toString() ||
              serialized === public3.toString();
    }).should.equal(true);
    transaction.sign(privateKey1);
    _.every(input.publicKeysWithoutSignature(), (publicKeyMissing) => {
      const serialized = publicKeyMissing.toString();
      return serialized === public2.toString() ||
              serialized === public3.toString();
    }).should.equal(true);
  });
  it('can clear all signatures', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000)
      .sign(privateKey1)
      .sign(privateKey2);

    const input = transaction.inputs[0];
    input.isFullySigned().should.equal(true);
    input.clearSignatures();
    input.isFullySigned().should.equal(false);
  });
  it('can estimate how heavy is the output going to be', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];
    input._estimateSize().should.equal(147);
  });
  it('uses SIGHASH_ALL by default', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];
    const sigs = input.getSignatures(transaction, privateKey1, 0);
    sigs[0].sigtype.should.equal(Signature.SIGHASH_ALL);
  });
  it('roundtrips to/from object', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000)
      .sign(privateKey1);
    const input = transaction.inputs[0];
    const roundtrip = new MultiSigInput(input.toObject());
    roundtrip.toObject().should.deep.equal(input.toObject());
  });
  it('roundtrips to/from object when not signed', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction()
      .from(output, [public1, public2, public3], 2)
      .to(address, 1000000);
    const input = transaction.inputs[0];
    const roundtrip = new MultiSigInput(input.toObject());
    roundtrip.toObject().should.deep.equal(input.toObject());
  });
  it('can parse list of signature buffers, from TX signed with key 1 and 2', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction('');

    const inputObj = transaction.inputs[0].toObject();
    inputObj.output = output;
    transaction.inputs[0] = new Transaction.Input(inputObj);

    inputObj.signatures = MultiSigInput.normalizeSignatures(
      transaction,
      transaction.inputs[0],
      0,
      transaction.inputs[0].script.chunks.slice(1).map((s) => { return s.buf; }),
      [public1, public2, public3]
    );

    transaction.inputs[0] = new MultiSigInput(inputObj, [public1, public2, public3], 2);

    transaction.inputs[0].signatures[0].publicKey.should.deep.equal(public1);
    transaction.inputs[0].signatures[1].publicKey.should.deep.equal(public2);
    should.equal(transaction.inputs[0].signatures[2], undefined);
    transaction.inputs[0].isValidSignature(transaction, transaction.inputs[0].signatures[0]).should.be.true;
    transaction.inputs[0].isValidSignature(transaction, transaction.inputs[0].signatures[1]).should.be.true;
  });
  it('can parse list of signature buffers, from TX signed with key 3 and 1', function() {
    this.timeout(20 * 1000)
    const transaction = new Transaction('010000000140c1ae9d6933e4a08594f814ba73a4e94d19c8a83f45784b1684b3a3f84ee66600000000fd1312004d06093000000000f30a5e943fc88ee9fca2cf52319d4072a8ebac77c4e154e8a3a6f53742f13bef5b0485815d9701a009018de51932c7f11377a92abcc8b41b088057afa86397be407a83b0af132a821a10e48d4a2f5b43e7de17af25153bb3f8de92b8730c40f7b87d050b4c5b99c766d34ef8bf9f1efd128d311d212930999c272853061141aafb398ab365fb62455658b23ee1c5e8293da20635f4312e5b46afa39dd35c85455815b5f1c96d83aa8177925017a71f730259344085d78bb1ac3c4d00304e75b5b2a2308fd568b91a6d3d2217fe49ea47260418cad6cd48a11a9388e32ca5eb3c7f2d259bd4a8ca922c38bd81c12e6fa09fa946256ca29d134fadd152e7ba8db7a4f9645896ee048e0cfe42df367d97065fd11f279fe552316f95b10542e2b47f5c39801c308b66b60688b89ea8ac8a4db0afba4ec41f010ffbdd53199404cc47fc225db9174e85ca5ee67c6430bd662e851896126bcff3f1cb13753dd6d66cd46187df40457e83cc1a7695d1ac355484b2f9182dce1e3324c7f035312180e4466929afb91ddc720c849db3998897e3f5d3a40b2068817df7e71eb96dcf375bb9e1dcfc48ab9b5296615223e252729b5a979f8299b6efd36299030fab3a01522b7e8517f3d4bd3bc177c607b91888ace40659859384f4f51bb5ea76f65a4a990d3ba79a9c653b7a936a12aa83ea3bd84cbddd81ae4c40fe025f57b0326d7d9749f79107da4f1e8cdbb8e14ab841efec0faf81d750fb6b1b5e4557202a9885ae8425a7bb190409e7f9145b2cfa5e77e26a938be8b6da8847c200003a510dc7b3b108a1c7166081800ae233a26afab38463423a90d3f422d9a4b00546e0f3dfd3ea8d95f1bf0847bc7400205c070a9f558c649c5b14731e233b2952b64c6a31f291c4ff698e5aaefd31a13be30103f91b6bfb714e25d897798ea8d4e9f9cd499362c0bfbfb576fc4c838ceac81fb6f65a810e1ce6c154c754b3f818690633f9aea2a362e2a7239d92632db939e83b5bd893a3b8e4998f917106ff919a4a6012c9fbd5534ee5530f7f657c4e3803ab261f91331c374e31056ec897b02e164d9db22b8c5569df4f3eef31d8b7864a3565c2a344e0ae91dceb7ecdb58195137353c8c59b6235429b72888290480e56d2d7e0a9dfa4a1d2a9214c24100ce36f50612aa272af4c74966ca98f81417304ce77802d58acd99689720bc3a0d0b15633ba913e287fa1b5351cb77351acea5fb9db4486ed6fcdd0e65c8a800a4f3b6ad10effeebed89791adf7935d01c563b598fbdc9bc91a4cf0be3bc69fb99c308ee1e008a3ecf29c65cc61f07484bc5490493133db84dd6d43c78f3523a2003c15ca467717ea9a372c06fe10d8e384641e44e2ef119a0931a986a9cf7c6f5967f56404d0b6bd37ee40e554123c574dd073ca64fe46b216ef6de9482269f253bdd791e546826007e3b49139c49efdac757efbd977feb54a918a464ce3c52480ca960ec828eee87b7e810c98ab487a99bd32454c45e33c8007a0a416b55d65dc6bee418bc59574e6a0c9815e4eb6e1f39d65147e0fa6445d94c69ba747e9c6d52a88d59f27c12c6efa1e3f36b5124db2a9787ddfa7faeceef89dd8c1c51ffd40eae38ddebcb4c4ff6bc8f8cd428342790c4c3af2406d79f3e784ec83837e050558615732b7d7ef063bf97753d2ff905219c540e72f3f260bc819f69f42af08076836b754af12022ea48cde385e88b82209ee41a8752236f976afafbfb37874ccb6e7a1b23125721eed5b34ac69107a25f1a727116b03d132ab3687e4751fe00958f7300f785b5ed867c96534b91f08cbbc2c28b47e770b2344e9f4d92a39f6b036395d05311817237a1ad9976725eb2e561c786f03b1d6d969b23638c3a0361f541ed10cbb7661f138ba1b81d37ffb42a48645a08bfbba6d415b6362adeb599f11b7aecdb1bd4b85d505ae2a05856e03de37e3ecd4d93d9429d46668f2ae077ee248c10a4b5f03a5a07b0c36a025b215c48d93051c325c2496be73601156940a9354360d26cacb4be50bc07deed355c90e29b45ccb0f864657a5e0dc857cea8896c804160fc7ea676514c98a4cb1066b4dde45684fcd1c16ca934622401cfce6b576740dc94bf196b1a9c05a6ffe84918c3fa1f32b0036126542e532c8b47c7610bc1fb1367681ff258eb8fae4218f9bf1462b03214a92eea5d4120e9d7fed96241d5ed4f0d6900eded005ae47c478258f7199c5d0d86cae425f339213c49a80480ec62cce527e10168165da5057d35f0971e1afcad41384588678792e0a0caf7cede2f4ca2bbb7f411c16cd60c12cc16a7b0575bb96bec5220c27fda3b259acb7088bd0ef61b6c6808359998704efbf2c2815371f70131b96af5bf44290efbaa2d3fbbb624ea73fdd74ff028cfe215ad9882955b0412ce2f6f5ad90ee900e9279b70588bb468eba3905938bcd4e96507383a365b3cb26adc1d9936b012481ce088768a80f3757cc7b25df7e204aa0fcd23397173b2fe323ca2d729fbc70ea0c41548839b3b7fa94b13aad0777396d7ab20c842ab75d17abf579c6c57b3f2fdfd85dac6edf1bd34d9c2e11fccc84aef3f59069957e0ffcd22f3a582fdc40cd0c3faeed64e6ac7b7ac77960cf6f0458ffb8c7bf11324537a5ce61dee0ea4d8cfe96a721785e210307f0ca79f9ae16e27d6e91f346a86fc55cbc386dd2439756f66d966f4f288777da5e7293dfa34dc5e8bc3806c9392552c1081ea7c818411d1a700de7fae7aa3886a5031833c07f53bc8deaa69b2e947f37b7a197aa3023850248838c658651d2148caf74e2ad54c3ab6a7209a5f5d4e693d7e6f0ca04260d05443cebe614aacce9361d99d5165445ef3a48cd14aa4b5e16548e12374be98cb0564e95ed94268ac48fe87fd48e8aa8aa97167e18b41340827456b0e4f3b23b022c59735c292b9d796f28f70b23d5a99f23957d15e2c4383843253a189b54e8c3ead0132e386854edaf5485eb9e7e3fad3c26dc49c11e8ca52d0798b7d0336e1ec6d455e66e606dd45fe2563a1d36874639c119cf8da40c3a1d77cc47da3025dce515023a7a5246d113cff1264f148add314021c8a476b115fd194fdd330a7c61641c3fa04b64581bf318329bfc06bb9471c898a3b6d9b7b5c9c8139ac7d0b48731bcf00c42a3129e7e7778e6d233b4b754a1f5f2c6bfe4c697684d91c276f50b668b125a0455b675eca9708ab5dddf2c140c2d76eb3c86e115754c74e404ae74e0be4fa42750014d0609300000000175250dd216d68acf13c08e72c7d957567304281022e9f2755f2225b8588233c6a23e301750a99699d6ad34103984485274b15c426dd10403344182617747b68705a87aecb3491f5e9a8d45b4738900100d001924e51f76f2d8bb9b2bff62d5a27fbead284da174d4103d128d4a855d86b2981e676b491cc5186d4332138085992051ce87a1dec4abcd63f566db591bbc4d0a8063317996da5c0b20b36d8fa7db177d50defff38204b41b21d25f3367cc73ddc2e7f77dc21979e3f108d12737bb2ba3e2b7a18d07b5600720034f62a54184c3ecfa6060dae6efd762ee6fa677db4b50a4f06a996321a2584f5be314fb3c8fa0c0e51a22d0add5263d713502da0dcd89cbd134a252885bbbe77b9f88c6117eb048fd221c8c3ba3e9881349fe7d026ba654f87b627437f5cc5acf9c94ef32aec855c29d938eaeb13b389ce30a441cc9e4b3b0a2984ea7f849d3744b56dba5aea356ef7aa426bb46c245d95f5bdc6e82721ca68dc3e663a9c0b4a3f32a9195d90371a90c40d573ba8314fde564733e5a636aaf544159a594cc9fc3c5d9c25547454c66b9c2905a223c77a3fc213edb0bbb5f0cf148024429ef3686a84d93f1ed0589c6b687af1aad09ba19bf52563e1d559b03230a05c9a9634a1169d14e3ad903056d6e69d5b71bcc4570a21dabc2f929520b96d4d68b1b7dc3ab288e1c0b83500f17e86019305c6ae3d942bfdf72c844b67bfb3e84000cca6433213b8e9579c6f6a1e19fe63cfb8f1bd1a58a5dfe5783e83a2ba2666e0e7cbe8889c0ea88097c252b57d607b8dafd134d7af34940a26bd6b3fea5a4ec11a7d5faf39ba43d50756c83bd87b335e416dee2e647505a9044d8f2f7ee33d1c6ac4a5e336273f062441fbfc5738abe2bf216c17d109aeda5a3e790e3824cdbb756301d6c54def5554c1d0249709db25fdb351fbb30f85167e336564167fae89c91e273f05aed197cbb83962b052d076f403951f79335a44dad38dbddbddce5914b6a613f74e0cb53fe587c1755936d94a1f50ac98713740b06d2040d0f4c35164751643e0e013be4e5ed31025ed55952af68207b07414471d2e86098c73e46aad26be35338137f8b510b781bfa380a21c5b8b0def782f160d51903fa936a60bdee5eedb91965d4925f8bc82b26b0e497256f5cb91e65e7f6cb8668b58405c8c7721ba1a689e05d870dd2bd5c2d1797c9b8b8ff4c37a70d1a4c72da72468bfe642061b5d93da871eac557cc60500083fcdbd7d033bdb170154a543a36b38b82e2f17d20d0ee27bfd10b6a67ce0db383b9aa59acad42aa7ab25b51b12752154564cd8ccde6c909a5dbddfb18e7921c548a339bc7e052b036853d52768818502b7ebec6f73e86a247b42142deb22ac70c29ee8b8d87d9e12e5433be52c101d164785b1a14647f0d21b4cf32e734f727b9b81fa72d7ccc5a43ce0af8d091ba9f5306743a587ebcb5f1ed038668055512cb3be87c02662614f62aa49bb2075d59a018d3f800e36458766ca6ce165110910edfd000992a9bca7ef69c313420ae292a0bee3d497c3025630e9a355b4e92b019bd514d3bece51cfe94c2d1be9565cbf326b1ccbd0d960c55e75191de7df7124bb3747894afae73f1fa04b9516f81b26b637c6b1a1e7731a5dc7ba314e35f4da323947ca8b2215543106424a28b56ba4e89a80f10b66c2a5926197527673db145d24950dfb807704c165694dfbf60a3860c10bfcdb413a706a3faa7f6b86ecac9244a98b2f2dadc07e6ec4c28bb57c2c9c52991efa7e1624f37e097161b1f07844372edf14f5e14cbc29bae8483ce20e1f5429da83a2362681ca2b706cf934a54e11b3784c45e03845db1c1f2421bdec8797269b6e712adf89eb587506212871c8e76442839d41016ddf39e2590ad9760b74313b7a0c80976944151432a9b4507f67fe1e3ce223afa08fd86f582c12c22a5acd6bcf40f36b4e2f7853288befd509ed667af4a0645a602d38275ead3ef2c0199a5679135fb614689544c7698135cd7007b4fcaa73435565821c9e599d7b66cce833cd352b899d21fc9908cfc202003bdedd45580f098529a784b62a964a82cb9f0aa5f2322121af9c6c96b152fb550f1df152f0ae7ad5a2b87686741832930ba0ce970e1155102ce11f4fc0d092c0bda0cd3054fcc1ae723f5705e8d6e25b90e4b53202cc0f2f5c3ae69d9c5a1af40f163b78895743e365cebf6521b4e0ecfc2c0b29701acf42d25374d1144559a128d80a70f5114d44e771d71b2a5f9775683837ee5189da4521fc6a0b4ca65fc7d2a1a3b4e23a33cbdeb8808edbf8780713e97e5acaaf6b38fccbed9a12455090e4b911524f7501cd6decbcb74cd1bf0dc39121f35a2ba92714a7482880b33e09b5e876bf1171835dfe32ddafacb6408a28ccca9cff27b5dfe1da4bcf70af09355427fb1c8a8efd00106e53feaae2706b18f5af9c97eacfb01620424233a1a232912111158e693d349c308b75e9cc39c8a07f36fb88d87fcdbbd4f654d6055b4300f879741d5478d61927e535c32baae0f21f182abbc53e44423525c63033590b26db66748aa7a72ef1eb7cb7230e5d14ad5d3164a6bd07f82666caae9cafa744fa40a6bbe9f340b2c8b34804e1c6f7f23db8954072e9661915ab64bb0a03abae401557a29b49391aab9d9e1be45972eead2e3d04332cecb99955d7256d8a8073c5fe268ae36425c25da2cdfc5f2bbc05a7b9a345fae5adb63266f89b988f85892b45c0fbed56afc63203359e73aaa7f00af10acb2d64883b1812868ea664541659c93d0c357c5851ca1d73d599613fff7c2b9d2ad44ddfc2c9f037de0290aa46f52853e94872bae5c367027d9c00182794c92337711fad92a51412dfddc37a0db887d644186eab02fab3869948df279b2ee68ddb6e10f6dd1a9d914e00e982727c032f745393b9cf842dbc2f36077293fa03027f72f14688e111ab78e067d88e3ef2cd7445afd6798a625acc0ca129a347132522d4bd0e27e130b18fb803270892f0a43287b5372c62381d85676ea576e8071119178a0b5bd706c6be2ff2de2449cfb2fa1187e967d316bca705db5cd0a2627f531c9178321b59529bc7785f8a104e3167cf7d0aac7a30fb16a8b010e56087a89439e7833005f5fee46935794dac33c192c3582d7aee80e6adfbf2bc90a0e5ec90dede3e19ab1f3ec7c1e9a0ed6ca3770059ffc144dbf0efb70a05d1992b684277b0ebbf93190e30109d562416bed7c0d06198e0201ffffffff0140420f00000000001976a914dfb046745e95abf6d4cb7a1710f6d65bd2b9cbe188ac00000000');

    const inputObj = transaction.inputs[0].toObject();
    inputObj.output = output;
    transaction.inputs[0] = new Transaction.Input(inputObj);

    inputObj.signatures = MultiSigInput.normalizeSignatures(
      transaction,
      transaction.inputs[0],
      0,
      transaction.inputs[0].script.chunks.slice(1).map((s) => { return s.buf; }),
      [public1, public2, public3]
    );

    transaction.inputs[0] = new MultiSigInput(inputObj, [public1, public2, public3], 2);

    transaction.inputs[0].signatures[0].publicKey.should.deep.equal(public1);
    should.equal(transaction.inputs[0].signatures[1], undefined);
    transaction.inputs[0].signatures[2].publicKey.should.deep.equal(public3);
    transaction.inputs[0].isValidSignature(transaction, transaction.inputs[0].signatures[0]).should.be.true;
    transaction.inputs[0].isValidSignature(transaction, transaction.inputs[0].signatures[2]).should.be.true;
  });
});
